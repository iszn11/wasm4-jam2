const std = @import("std");
const w4 = @import("wasm4.zig");

const camera = @import("camera.zig");

const Vec2 = @import("Vec2.zig");

pub const width = 20;
pub const height = 20;

pub const tile_size_sp = 0x0800;

const tiles = [5][8]u8{
    [_]u8{
        0b10101010,
        0b00000001,
        0b10000000,
        0b00000001,
        0b10000000,
        0b00000001,
        0b10000000,
        0b01010101,
    },
    [_]u8{
        0b00000001,
        0b00000001,
        0b01001001,
        0b00100101,
        0b00100101,
        0b01001001,
        0b00000001,
        0b00000001,
    },
    [_]u8{
        0b00000000,
        0b00100100,
        0b00011000,
        0b00000000,
        0b00100100,
        0b00011000,
        0b00000000,
        0b11111111,
    },
    [_]u8{
        0b10000000,
        0b10000000,
        0b10010010,
        0b10100100,
        0b10100100,
        0b10010010,
        0b10000000,
        0b10000000,
    },
    [_]u8{
        0b11111111,
        0b00000000,
        0b00011000,
        0b00100100,
        0b00000000,
        0b00011000,
        0b00100100,
        0b00000000,
    },
};

const level = [width * height]u8{
    1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
    1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1,
    1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
    1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
    1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
    1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
    1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
    1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1,
    1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
    1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
    1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1,
    1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
    1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1,
    1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,
    0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
};

pub fn at(x: i32, y: i32) u8 {
    return level[@intCast(usize, y * width + x)];
}

pub fn draw() void {
    w4.draw_colors.color1 = 0;
    w4.draw_colors.color2 = 2;

    var min_tl: Vec2 = undefined;
    var max_tl: Vec2 = undefined;
    //camera.getBoundsTL(&min_tl, &max_tl);

    //min_tl = min_tl.max(Vec2.inits(0));
    //max_tl = max_tl.min(Vec2.init(width, height).subs(1));
    min_tl = Vec2.inits(0);
    max_tl = Vec2.init(width, height).subs(1);

    //const offset_px = camera.getOffsetPX();

    var y: i32 = min_tl.y;
    while (y <= max_tl.y) : (y += 1) {
        var x: i32 = min_tl.x;
        while (x <= max_tl.x) : (x += 1) {
            const tile_id = at(x, y);
            if (tile_id == 0) continue;
            //w4.blit(&tile, x * 8 + offset_px.x, y * 8 + offset_px.y, 8, 8, .{});
            w4.blit(&tiles[tile_id - 1], Vec2.init(x, y).mul(8), 8, 8, .{});
        }
    }
}
